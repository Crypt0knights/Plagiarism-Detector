The Cathedral and the Bazaar
Eric Steven Raymond
cf text and copyright at:www.tuxedo.org/~esr/writings
Abstract
I anatomize a successful open-source project, fetchmail, that
was run as a deliberate test of some surprising theories about
so=ware engineering suggested by the history of Linux. I dis-
cuss these theories in terms of two fundamentally di:erent
development styles, the “cathedral” model of most of the com-
mercial world versus the “bazaar” model of the Linux world.
I show that these models derive from opposing assumptions
about the nature of the so=ware-debugging task. I then make a
sustained argument from the Linux experience for the proposi-
tion that “Given enough eyeballs, all bugs are shallow”, suggest
productive analogies with other self-correcting systems of self-
ish agents, and conclude with some exploration of the implica-
tions of this insight for the future of so=ware.
1  The Cathedral and the Bazaar
Linux is subversive. Who would have thought even five years ago
(1991) that a world-class operating system could coalesce as if by
magic out of part-time hacking by several thousand developers scat-
tered all over the planet, connected only by the tenuous strands of
the Internet?
Certainly not I. By the time Linux swam onto my radar screen
in early 1993, I had already been involved in Unix and open-source
development for ten years. I was one of the firstgnucontributors
in the mid-1980s. I had released a good deal of open-source so=-
ware onto the net, developing or co-developing several programs
(nethack, Emacs’svcandgudmodes, xlife, and others) that are still
in wide use today. I thought I knew how it was done.
Linux overturned much of what I thought I knew. I had been
preaching the Unix gospel of small tools, rapid prototyping and evo-
1
----------------Page (0) Break----------------
22  THE MAIL MUST GET THROUGH
lutionary programming for years. But I also believed there was a
certain critical complexity above which a more centralized, a priori
approach was required. I believed that the most important so=ware
(operating systems and really large tools like the Emacs program-
ming editor) needed to be built like cathedrals, carefully cra=ed by
individual wizards or small bands of mages working in splendid
isolation, with no beta to be released before its time.
Linus Torvalds’s style of development – release early and o=en,
delegate everything you can, be open to the point of promiscuity
– came as a surprise. No quiet, reverent cathedral-building here –
rather, the Linux community seemed to resemble a great babbling
bazaar of di:ering agendas and approaches (aptly symbolized by
the Linux archive sites, who’d take submissions fromanyone) out of
which a coherent and stable system could seemingly emerge only by
a succession of miracles.
The fact that this bazaar style seemed to work, and work well,
came as a distinct shock. As I learned my way around, I worked
hard not just at individual projects, but also at trying to under-
stand why the Linux world not only didn’t fly apart in confusion
but seemed to go from strength to strength at a speed barely imag-
inable to cathedral-builders.
By mid-1996 I thought I was beginning to understand. Chance
handed me a perfect way to test my theory, in the form of an open-
source project that I could consciously try to run in the bazaar style.
So I did – and it was a significant success.
This is the story of that project. I’ll use it to propose some apho-
risms about e:ective open-source development. Not all of these are
things I first learned in the Linux world, but we’ll see how the Linux
worldgivesthemparticularpoint.IfI’mcorrect,they’llhelpyouun-
derstand exactly what it is that makes the Linux community such a
fountain of good so=ware – and, perhaps, they will help you become
more productive yourself.
2  The Mail Must Get Through
Since 1993 I’d been running the technical side of a small free-access
Internet service provider called Chester County InterLink(ccil)in
West Chester, Pennsylvania. I co-foundedcciland wrote our unique
multiuserbulletin-boardso=ware–youcancheckitoutbytelnetting
----------------Page (1) Break----------------
3
tolocke.ccil.org. Today it supports almost three thousand users
on thirty lines. The job allowed me 24-hour-a-day access to the net
throughccil’s 56K line – in fact, the job practically demanded it!
I had gotten quite used to instant Internet email. I found having
toperiodicallytelnetovertolocketocheckmymailannoying.What
Iwanted wasformy mailto bedeliveredon snark(myhome system)
so that I would be notified when it arrived and could handle it using
all my local tools.
TheInternet’snativemailforwardingprotocol,smtp(SimpleMail
Transfer Protocol), wouldn’t suit, because it works best when ma-
chines are connected full-time, while my personal machine isn’t al-
ways on the net, and doesn’t have a staticipaddress. What I needed
wasaprogramthatwouldreachoutovermyintermittentdialupcon-
nection and pull across my mail to be delivered locally. I knew such
things existed, and that most of them used a simple application pro-
tocol calledpop(Post O?ce Protocol).popis now widely supported
by most common mail clients, but at the time, it wasn’t built-in to
the mail reader I was using.
I needed apop3client. So I went out on the net and found one.
Actually, I found three or four. I used one of them for a while, but it
was missing what seemed an obvious feature, the ability to hack the
addresses on fetched mail so replies would work properly.
The problem was this: suppose someone named ‘joe’ onlocke
sent me mail. If I fetched the mail to snark and then tried to reply to
it, my mailer would cheerfully try to ship it to a nonexistent ‘joe’ on
snark. Hand-editing reply addresses to tack on ‘@ccil.org’ quickly got
to be a serious pain.
This was clearly something the computer ought to be doing for
me. But none of the existingpopclients knew how! And this brings
us to the first lesson:
# 1Every good work of so=ware starts by scratching a developer’s
personal itch.
Perhaps this should have been obvious (it’s long been proverbial
that “Necessity is the mother of invention”) but too o=en so=ware
developers spend their days grinding away for pay at programs they
neither need nor love. But not in the Linux world – which may ex-
plain why the average quality of so=ware originated in the Linux
community is so high.
----------------Page (2) Break----------------
42  THE MAIL MUST GET THROUGH
So, did I immediately launch into a furious whirl of coding up
a brand-newpop3client to compete with the existing ones? Not on
your life! I looked carefully at thepoputilities I had in hand, asking
myself “which one is closest to what I want?” Because
# 2Good programmers know what to write. Great ones know what
to rewrite (and reuse).
While I don’t claim to be a great programmer, I try to imitate one.
An important trait of the great ones is constructive laziness. They
know that you get an A not for e:ort but for results, and that it’s
almost always easier to start from a good partial solution than from
nothing at all.
Linus Torvalds, for example, didn’t actually try to write Linux
from scratch. Instead, he started by reusing code and ideas from
Minix, a tiny Unix-like operating system forpcclones. Eventually
all the Minix code went away or was completely rewritten – but
while it was there, it provided sca:olding for the infant that would
eventually become Linux.
In the same spirit, I went looking for an existingpoputility that
was reasonably well coded, to use as a development base.
The source-sharing tradition of the Unix world has always been
friendly to code reuse (this is why thegnuproject chose Unix as
a baseos, in spite of serious reservations about theositself). The
Linux world has taken this traditionnearly to its technological limit;
ithasterabytesofopensourcesgenerallyavailable.Sospendingtime
lookingforsomeelse’salmost-good-enoughismorelikelytogiveyou
good results in the Linux world than anywhere else.
And it did for me. With those I’d found earlier, my second search
made up a total of nine candidates – fetchpop, PopTart, get-mail, gw-
pop, pimp, pop-perl, popc, popmail and upop. The one I first settled
on was ‘fetchpop’ by Seung-Hong Oh. I put my header-rewrite fea-
ture in it, and made various other improvements which the author
accepted into his 1.9 release.
A few weeks later, though, I stumbled across the code for ‘pop-
client’ by Carl Harris, and found I had a problem. Though fetch-
pop had some good original ideas in it (such as its background-
daemon mode), it could only handlepop3and was rather amateur-
ishlycoded(Seung-Hongwasatthattimeabrightbutinexperienced
programmer, and both traits showed). Carl’s code was better, quite
----------------Page (3) Break----------------
5
professional and solid, but his program lacked several important
and rather tricky-to-implement fetchpop features (including those
I’d coded myself).
Stay or switch? If I switched, I’d be throwing away the coding I’d
already done in exchange for a better development base.
Apracticalmotivetoswitchwasthepresenceofmultiple-protocol
support.pop3is the most commonly used of the post-o?ce server
protocols, but not the only one. Fetchpop and the other competi-
tion didn’t dopop2,rpop, orapop, and I was already having vague
thoughts of perhaps addingimap(Internet Message Access Protocol,
the most recently designed and most powerful post-o?ce protocol)
just for fun.
But I had a more theoretical reason to think switching might be
as good an idea as well, something I learned long before Linux.
# 3“Plan to throw one away; you will, anyhow.” (Fred Brooks, “The
Mythical Man-Month”, Chapter 11)
Or, to put it another way, you o=en don’t really understand the
problem until a=er the first time you implement a solution. The
second time, maybe you know enough to do it right. So if you want
to get it right, be ready to start over at least once[jb].
Well (I told myself) the changes to fetchpop had been my first try.
So I switched.
A=er I sent my first set of popclient patches to Carl Harris on 25
June 1996, I found out that he had basically lost interest in popclient
sometimebefore.Thecodewasabitdusty,withminorbugshanging
out. I had many changes to make, and we quickly agreed that the
logical thing for me to do was take over the program.
Withoutmyactuallynoticing,theprojecthadescalated.Nolonger
was I just contemplating minor patches to an existingpopclient. I
took on maintaining an entire one, and there were ideas bubbling
in my head that I knew would probably lead to major changes.
In a so=ware culture that encourages code-sharing, this is a nat-
ural way for a project to evolve. I was acting out this principle:
# 4If you have the right attitude, interesting problems will find you.
But Carl Harris’s attitude was even more important. He under-
stood that
----------------Page (4) Break----------------
63  THE IMPORTANCE OF HAVING USERS
# 5When you lose interest in a program, your last duty to it is to
hand it o:to a competent successor.
Without ever having to discuss it, Carl and I knew we had a com-
mon goal of having the best solution out there. The only question
for either of us was whether I could establish that I was a safe pair
of hands. Once I did that, he acted with grace and dispatch. I hope I
will do as well when it comes my turn.
3  The Importance of Having Users
And so I inherited popclient. Just as importantly, I inherited pop-
client’s user base. Users are wonderful things to have, and not just
because they demonstrate that you’re serving a need, that you’ve
done something right. Properly cultivated, they can become co-de-
velopers.
Another strength of the Unix tradition, one that Linux pushes
to a happy extreme, is that a lot of users are hackers too. Because
source code is available, they can bee:ectivehackers. This can be
tremendously useful for shortening debugging time. Given a bit
of encouragement, your users will diagnose problems, suggest fixes,
andhelpimprovethecodefarmorequicklythanyoucouldunaided.
# 6Treating your users as co-developers is your least-hassle route to
rapid code improvement and e:ective debugging.
The power of this e:ect is easy to underestimate. In fact, pretty
well all of us in the open-source world drastically underestimated
how well it would scale up with number of users and against system
complexity, until Linus Torvalds showed us di:erently.
In fact, I think Linus’s cleverest and most consequential hack
was not the construction of the Linux kernel itself, but rather his
invention of the Linux development model. When I expressed this
opinion in his presence once, he smiled and quietly repeated some-
thing he has o=en said: “I’m basically a very lazy person who likes
to get credit for things other people actually do.” Lazy like a fox. Or,
as Robert Heinlein famously wrote of one of his characters, too lazy
to fail.
Inretrospect,oneprecedentforthemethodsandsuccessofLinux
can be seen in the development of thegnuEmacs Lisp library and
----------------Page (5) Break----------------
7
Lisp code archives. In contrast to the cathedral-building style of the
Emacs C core and most othergnutools, the evolution of the Lisp
codepoolwasfluidandveryuser-driven.Ideasandprototypemodes
wereo=enrewrittenthreeorfourtimesbeforereachingastablefinal
form. And loosely-coupled collaborations enabled by the Internet, a
la Linux, were frequent.
Indeed, my own most successful single hack previous to fetch-
mail was probably Emacsvc(version control) mode, a Linux-like
collaboration by email with three other people, only one of whom
(RichardStallman,theauthorofEmacsandfounderoftheFreeSo=-
ware Foundation) I have met to this day. It was a front- end forsccs,
rcsand latercvsfrom within Emacs that o:ered “one-touch” ver-
sion control operations. It evolved from a tiny, crude sccs.el mode
somebody else had written. And the development ofvcsucceeded
because, unlike Emacs itself, Emacs Lisp code could go through re-
lease/test/improve generations very quickly.
4  Release Early, Release O=en
Early and frequent releases are a critical part of the Linux develop-
ment model. Most developers (including me) used to believe this
was bad policy for larger than trivial projects, because early versions
are almost by definition buggy versions and you don’t want to wear
out the patience of your users.
This belief reinforced the general commitment to a cathedral-
building style of development. If the overriding objective was for
users to see as few bugs as possible, why then you’d only release a
version every six months (or less o=en), and work like a dog on de-
buggingbetweenreleases.TheEmacsCcorewasdevelopedthisway.
The Lisp library, in e:ect, was not – because there were active Lisp
archives outside thefsf’s control, where you could go to find new
and development code versions independently of Emacs’s release
cycle[qr].
The most important of these, the Ohio State elisp archive, an-
ticipated the spirit and many of the features of today’s big Linux
archives. But few of us really thought very hard about what we were
doing, or about what the very existence of that archive suggested
aboutproblemsinthefsf’scathedral-buildingdevelopmentmodel.
I made one serious attempt around 1992 to get a lot of the Ohio code
----------------Page (6) Break----------------
84  RELEASE EARLY, RELEASE OFTEN
formally merged into the o?cial Emacs Lisp library. I ran into polit-
ical trouble and was largely unsuccessful.
But by a year later, as Linux became widely visible, it was clear
that something di:erent and much healthier was going on there.
Linus’sopendevelopmentpolicywastheveryoppositeofcathedral-
building.Linux’sInternetarchiveswereburgeoning,multipledistri-
butionswerebeingfloated.Andallofthiswasdrivenbyanunheard-
of frequency of core system releases.
Linuswastreatinghisusersasco-developersinthemoste:ective
possible way:
# 7Release early. Release o=en. And listen to your customers.
Linus’s innovation wasn’t so much in doing quick-turnaround
releases incorporating lots of user feedback (something like this had
been Unix-world tradition for a long time), but in scaling it up to
a level of intensity that matched the complexity of what he was
developing. In those early times (around 1991) it wasn’t unknown
for him to release a new kernel more than once a day! Because he
cultivated his base of co-developers and leveraged the Internet for
collaboration harder than anyone else, this worked.
Buthowdid it work? And was it something I could duplicate, or
did it rely on some unique genius of Linus Torvalds?
I didn’t think so. Granted, Linus is a damn fine hacker. How
many of us could engineer an entire production-quality operating
system kernel from scratch? But Linux didn’t represent any awe-
some conceptual leap forward. Linus is not (or at least, not yet) an
innovative genius of design in the way that, say, RichardStallman or
James Gosling (of NeWS and Java) are. Rather, Linus seems to me to
be a genius of engineering and implementation, with a sixth sense
for avoiding bugs and development dead-ends and a true knack for
finding the minimum-e:ort path from point A to point B. Indeed,
the whole design of Linux breathes this quality and mirrors Linus’s
essentially conservative and simplifying design approach.
So, if rapid releases and leveraging the Internet medium to the
hilt were not accidents but integral parts of Linus’s engineering-
genius insight into the minimum-e:ort path, what was he maximiz-
ing? What was he cranking out of the machinery?
Put that way, the question answers itself. Linus was keeping his
hacker/users constantly stimulated and rewarded – stimulated by
----------------Page (7) Break----------------
9
theprospectofhavinganego-satisfyingpieceoftheaction,rewarded
by the sight of constant (evendaily) improvement in their work.
Linus was directly aiming to maximize the number of person-
hours thrown at debugging and development, even at the possible
cost of instability in the code and user-base burnout if any serious
bug proved intractable. Linus was behaving as though he believed
something like this:
# 8Given a large enough beta-tester and co-developer base, almost
every problem will be characterized quickly and the fix obvious to
someone.
Or, less formally, “Given enough eyeballs, all bugs are shallow.” I
dub this: “Linus’s Law”.
My original formulation was that every problem “will be trans-
parent to somebody”. Linus demurred that the person who under-
stands and fixes the problem is not necessarily or even usually the
person who first characterizes it. “Somebody finds the problem,” he
says, “and somebodyelseunderstands it. And I’ll go on record as
saying that finding it is the bigger challenge.” But the point is that
both things tend to happen rapidly.
Here, I think, is the core di:erence underlying the cathedral-
builder and bazaar styles. In the cathedral-builder view of program-
ming, bugs and development problems are tricky, insidious, deep
phenomena. It takes months of scrutiny by a dedicated few to de-
velop confidence that you’ve winkled them all out. Thus the long
release intervals, and the inevitable disappointment when long-
awaited releases are not perfect.
In the bazaar view, on the other hand, you assume that bugs
are generally shallow phenomena – or, at least, that they turn shal-
low pretty quickly when exposed to a thousand eager co-developers
poundingoneverysinglenewrelease.Accordinglyyoureleaseo=en
in order to get more corrections, and as a beneficial side e:ect you
have less to lose if an occasional botch gets out the door.
And that’s it. That’s enough. If “Linus’s Law” is false, then any
system as complex as the Linux kernel, being hacked over by as
manyhandsastheLinuxkernel,shouldatsomepointhavecollapsed
under the weight of unforseen bad interactions and undiscovered
“deep” bugs. If it’s true, on the other hand, it is su?cient to explain
Linux’s relative lack of bugginess and its continuous uptimes span-
ning months or even years.
----------------Page (8) Break----------------
104  RELEASE EARLY, RELEASE OFTEN
Maybeitshouldn’thavebeensuchasurprise,atthat.Sociologists
years ago discovered that the averaged opinion of a mass of equally
expert (or equally ignorant) observers is quite a bit more reliable a
predictorthanthatofasinglerandomly-chosenoneoftheobservers.
They called this the “Delphi e:ect”. It appears that what Linus has
shown is that this applies even to debugging an operating system –
that the Delphi e:ect can tame development complexity even at the
complexity level of anoskernel.
One special feature of the Linux situation that clearly helps along
theDelphie:ectisthefactthatthecontributorsforanygivenproject
areself-selected.Anearlyrespondentpointedoutthatcontributions
are received not from a random sample, but from people who are
interested enough to use the so=ware, learn about how it works,
attempt to find solutions to problems they encounter, and actually
produce an apparently reasonable fix. Anyone who passes all these
filters is highly likely to have something useful to contribute.
I am indebted to my friend Je:Dutky<dutky@wam.umd.edu>
for pointing out that Linus’s Law can be rephrased as “Debugging
is parallelizable”. Je:observes that although debugging requires
debuggers to communicate with some coordinating developer, it
doesn’t require significant coordination between debuggers. Thus it
doesn’t fall prey to the same quadratic complexity and management
costs that make adding developers problematic.
In practice, the theoretical loss of e?ciency due to duplication of
work by debuggers almost never seems to be an issue in the Linux
world. One e:ect of a “release early and o=en policy” is to minimize
such duplication by propagating fed-back fixes quickly[jh].
Brooks (the author of “The Mythical Man-Month”) even made an
o:-hand observation related to Je:’s: “The total cost of maintaining
a widely used program is typically 40 percent or more of the cost
of developing it. Surprisingly this cost is strongly a:ected by the
number of users.More users find more bugs.” (my emphasis).
Moreusersfindmorebugsbecauseaddingmoreusersaddsmore
di:erentwaysofstressingtheprogram.Thise:ectisamplifiedwhen
the users are co- developers. Each one approaches the task of bug
characterization with a slightly di:erent perceptual set and analyt-
ical toolkit, a di:erent angle on the problem. The “Delphi e:ect”
seems to work precisely because of this variation. In the specific con-
text of debugging, the variation also tends to reduce duplication of
e:ort.
----------------Page (9) Break----------------
11
So adding more beta-testers may not reduce the complexity of
the current “deepest” bug from thedeveloper’spoint of view, but it
increases the probability that someone’s toolkit will be matched to
the problem in such a way that the bug is shallowto that person.
Linus coppers his bets, too. In case there are serious bugs, Linux
kernel version are numbered in such a way that potential users can
make a choice either to run the last version designated “stable” or
to ride the cutting edge and risk bugs in order to get new features.
This tactic is not yet formally imitated by most Linux hackers, but
perhaps it should be; the fact that either choice is available makes
both more attractive.[hbs]
5  When Is A Rose Not A Rose ?
Having studied Linus’s behavior and formed a theory about why it
was successful, I made a conscious decision to test this theory on my
new (admittedly much less complex and ambitious) project.
But the first thing I did was reorganize and simplify popclient
a lot. Carl Harris’s implementation was very sound, but exhibited a
kind of unnecessary complexity common to many C programmers.
He treated the code as central and the data structures as support for
the code. As a result, the code was beautiful but the data structure
design ad-hoc and rather ugly (at least by the high standards of this
oldlisphacker).
I had another purpose for rewriting besides improving the code
and the data structure design, however. That was to evolve it into
something I understood completely. It’s no fun to be responsible for
fixing bugs in a program you don’t understand.
For the first month or so, then, I was simply following out the
implications of Carl’s basic design. The first serious change I made
was to addimapsupport. I did this by reorganizing the protocol
machines into a generic driver and three method tables (forpop2,
pop3, andimap). This and the previous changes illustrate a general
principle that’s good for programmers to keep in mind, especially
in languages like C that don’t naturally do dynamic typing:
# 9Smart data structures and dumb code works a lot better than the
other way around.
----------------Page (10) Break----------------
125  WHEN IS A ROSE NOT A ROSE ?
Brooks, Chapter 9: “Show me your [code] and conceal your [data
structures], and I shall continue to be mystified. Show me your [data
structures], and I won’t usually need your [code]; it’ll be obvious.”
Actually,hesaid“flowcharts”and“tables”.Butallowingforthirty
years of terminological/cultural shi=, it’s almost the same point.
At this point (early September 1996, about six weeks from zero) I
started thinking that a name change might be in order – a=er all, it
wasn’t just apopclient any more. But I hesitated, because there was
as yet nothing genuinely new in the design. My version of popclient
had yet to develop an identity of its own.
That changed, radically, when fetchmail learned how to forward
fetched mail to thesmtpport. I’ll get to that in a moment. But first: I
said above that I’d decided to use this project to test my theory about
what Linus Torvalds had done right. How (you may well ask) did I
do that? In these ways:
– I released early and o=en (almost never less o=en than every
ten days; during periods of intense development, once a day).
– I grew my beta list by adding to it everyone who contacted me
about fetchmail.
– I sent chatty announcements to the beta list whenever I re-
leased, encouraging people to participate.
– And I listened to my beta testers, polling them about design
decisions and stroking them whenever they sent in patches
and feedback.
Thepayo:fromthesesimplemeasureswasimmediate.Fromthe
beginning of the project, I got bug reports of a quality most devel-
opers would kill for, o=en with good fixes attached. I got thoughtful
criticism, I got fan mail, I got intelligent feature suggestions. Which
leads to:
# 10If you treat your beta-testers as if they’re your most valuable
resource,they willrespondbybecoming yourmost valuableresource.
One interesting measure of fetchmail’s success is the sheer size
of the project beta list, fetchmail-friends. At the time of last revision
(August 2000) it has 249 members and is adding two or three a week.
Actually, as I revise in late May 1997 the list is beginning to lose
members from its high of close to 300 for an interesting reason.
----------------Page (11) Break----------------
13
Several people have asked me to unsubscribe them because fetch-
mail is working so well for them that they no longer need to see the
list tra?c! Perhaps this is part of the normal life-cycle of a mature
bazaar-style project.
6  Popclient becomes Fetchmail
The real turning point in the project was when Harry Hochheiser
sent me his scratch code for forwarding mail to the client machine’s
smtpport. I realized almost immediately that a reliable implemen-
tation of this feature would make all the other mail delivery modes
next to obsolete.
For many weeks I had been tweaking fetchmail rather incre-
mentally while feeling like the interface design was serviceable but
grubby – inelegant and with too many exiguous options hanging
out all over. The options to dump fetched mail to a mailbox file or
standard output particularly bothered me, but I couldn’t figure out
why.
(If you don’t care about the technicalia of Internet mail, the next
two paragraphs can be safely skipped.)
What I saw when I thought aboutsmtpforwarding was that pop-
clienthadbeentryingtodotoomanythings.Ithadbeendesignedto
be both a mail transport agent(mta)and a local delivery agent(mda).
Withsmtpforwarding, it could get out of themdabusiness and be a
puremta, handing o:mail to other programs for local delivery just
as sendmail does.
Why mess with all the complexity of configuring a mail delivery
agent or setting up lock-and-append on a mailbox when port 25 is
almost guaranteed to be there on any platform withtcp/ipsupport
in the first place? Especially when this means retrieved mail is guar-
anteedtolooklikenormalsender-initiatedsmtpmail,whichisreally
what we want anyway.
(Back to a higher level...)
Evenifyoudidn’tfollowtheprecedingtechnicaljargon,thereare
several important lessons here. First, thissmtp-forwarding concept
wasthebiggestsinglepayo:Igotfromconsciouslytryingtoemulate
Linus’s methods. A user gave me this terrific idea – all I had to do
was understand the implications.
----------------Page (12) Break----------------
146  POPCLIENT BECOMES FETCHMAIL
# 11The next best thing to having good ideas is recognizing good
ideas from your users. Sometimes the latter is better.
Interestingly enough, you will quickly find that if you are com-
pletely and self- deprecatingly truthful about how much you owe
other people, the world at large will treat you like you did every
bit of the invention yourself and are just being becomingly modest
about your innate genius. We can all see how well this worked for
Linus!
(WhenIgavemytalkatthePerlconferenceinAugust1997,hacker
extraordinaireLarryWallwasinthefrontrow.AsIgottothelastline
above he called out, religious-revival style, “Tell it, tell it, brother!”.
The whole audience laughed, because they knew this had worked
for the inventor of Perl, too.)
A=er a very few weeks of running the project in the same spirit,
I began to get similar praise not just from my users but from other
people to whom the word leaked out. I stashed away some of that
email;I’lllookatitagainsometimeifIeverstartwonderingwhether
my life has been worthwhile :–).
But there are two more fundamental, non-political lessons here
that are general to all kinds of design.
# 12O=en, the most striking and innovative solutions come from
realizing that your concept of the problem was wrong.
I had been trying to solve the wrong problem by continuing to
develop popclient as a combinedmta/mdawith all kinds of funky
local delivery modes. Fetchmail’s design needed to be rethought
fromthegroundupasapuremta,apartofthenormalsmtp-speaking
Internet mail path.
When you hit a wall in development – when you find yourself
hard put to think past the next patch – it’s o=en time to ask not
whether you’ve got the right answer, but whether you’re asking the
right question. Perhaps the problem needs to be reframed.
Well, I had reframed my problem. Clearly, the right thing to do
was (1) hacksmtpforwarding support into the generic driver, (2)
make it the default mode, and (3) eventually throw out all the other
delivery modes, especially the deliver-to-file and deliver-to-standard-
output options.
I hesitated over step 3 for some time, fearing to upset long-time
popclient users dependent on the alternate delivery mechanisms.
----------------Page (13) Break----------------
15
In theory, they could immediately switch to.forwardfiles or their
non-sendmail equivalents to get the same e:ects. In practice the
transition might have been messy.
But when I did it, the benefits proved huge. The cru=iest parts of
the driver code vanished. Configuration got radically simpler – no
more grovelling around for the systemmdaand user’s mailbox, no
moreworriesaboutwhethertheunderlyingossupportsfilelocking.
Also, the only way to lose mail vanished. If you specified delivery
to a file and the disk got full, your mail got lost. This can’t happen
withsmtpforwarding because yoursmtplistener won’t returnok
unless the message can be delivered or at least spooled for later
delivery.
Also, performance improved (though not so you’d notice it in a
singlerun). Another not insignificant benefit of this change was that
the manual page got a lot simpler.
Later, I had to bring delivery via a user-specified localmdaback
in order to allow handling of some obscure situations involving dy-
namicslip. But I found a much simpler way to do it.
The moral? Don’t hesitate to throw away superannuated features
when you can do it without loss of e:ectiveness. Antoine de Saint-
Exupéry (who was an aviator and aircra=designer when he wasn’t
being the author of classic children’s books) said:
# 13“Perfection (in design) is achieved not when there is nothing
more to add, but rather when there is nothing more to take away.”
When your code is getting both better and simpler, that is when
youknowit’sright.Andintheprocess,thefetchmaildesignacquired
an identity of its own, di:erent from the ancestral popclient.
It was time for the name change. The new design looked much
more like a dual of sendmail than the old popclient had; both are
mtas, but where sendmail pushes then delivers, the new popclient
pulls thendelivers. So, twomonths o:theblocks, Irenameditfetch-
mail.
There is a more general lesson in this story about howsmtpdeliv-
ery came to fetchmail. It is not only debugging that is parallelizable;
development and (to a perhaps surprising extent) exploration of de-
sign space is, too. When your development mode is rapidly iterative,
development and enhancement may become special cases of debug-
ging–fixing‘bugsofomission’intheoriginalcapabilitiesorconcept
of the so=ware.
----------------Page (14) Break----------------
167  FETCHMAIL GROWS UP
Even at a higher level of design, it can be very valuable to have
the thinking of lots of co-developers random-walking through the
design space near your product. Consider the way a puddle of water
finds a drain, or better yet how ants find food: exploration essen-
tially by di:usion, followed by exploitation mediated by a scalable
communication mechanism. This works very well; as with Harry
Hochheiser and me, one of your outriders may well find a huge win
nearby that you were just a little too close-focused to see.
7  Fetchmail Grows Up
There I was with a neat and innovative design, code that I knew
worked well because I used it every day, and a burgeoning beta list.
It gradually dawned on me that I was no longer engaged in a trivial
personal hack that might happen to be useful to few other people.
I had my hands on a program every hacker with a Unix box and a
slip/pppmail connection really needs.
With thesmtpforwarding feature, it pulled far enough in front
of the competition to potentially become a “category killer”, one of
those classic programs that fills its niche so competently that the
alternatives are not just discarded but almost forgotten.
I think you can’t really aim or plan for a result like this. You have
to get pulled into it by design ideas so powerful that a=erward the
results just seem inevitable, natural, even foreordained. The only
way to try for ideas like that is by having lots of ideas – or by having
the engineering judgment to take other peoples’ good ideas beyond
where the originators thought they could go.
Andy Tanenbaum had the original idea to build a simple native
Unix foribm pcs, for use as a teaching tool (he called it Minix). Linus
Torvalds pushed the Minix concept further than Andrew probably
thought it could go – and it grew into something wonderful. In the
same way (though on a smaller scale), I took some ideas by Carl
Harris and Harry Hochheiser and pushed them hard. Neither of us
was ‘original’ in the romantic way people think is genius. But then,
most science and engineering and so=ware development isn’t done
by original genius, hacker mythology to the contrary.
The results were pretty heady stu:all the same – in fact, just
the kind of success every hacker lives for! And they meant I would
have to set my standards even higher. To make fetchmail as good as I
----------------Page (15) Break----------------
17
now saw it could be, I’d have to write not just for my own needs, but
alsoincludeandsupportfeaturesnecessarytoothersbutoutsidemy
orbit. And do that while keeping the program simple and robust.
The first and overwhelmingly most important feature I wrote
a=er realizing this was multidrop support – the ability to fetch mail
from mailboxes that had accumulated all mail for a group of users,
and then route each piece of mail to its individual recipients.
Idecidedtoaddthemultidropsupportpartlybecausesomeusers
were clamoring for it, but mostly because I thought it would shake
bugs out of the single-drop code by forcing me to deal with address-
ing in full generality. And so it proved. Gettingrfc822address pars-
ingrighttookmearemarkablylongtime,notbecauseanyindividual
piece of it is hard but because it involved a pile of interdependent
and fussy details.
But multidrop addressing turned out to be an excellent design
decision as well. Here’s how I knew:
# 14Any tool should be useful in the expected way, but a truly great
tool lends itself to uses you never expected.
The unexpected use for multi-drop fetchmail is to run mailing
lists with the list kept, and alias expansion done, on theclientside of
the Internet connection. This means someone running a personal
machine through anispaccount can manage a mailing list without
continuing access to theisp’s alias files.
Anotherimportantchangedemandedbymybetatesterswassup-
port for 8-bitmime(Multipurpose Internet Mail Extensions) opera-
tion. This was pretty easy to do, because I had been careful to keep
the code 8-bit clean. Not because I anticipated the demand for this
feature, but rather in obedience to another rule:
# 15When writing gateway so=ware of any kind, take pains to dis-
turb the data stream as little as possible – and *never* throw away
information unless the recipient forces you to!
Had I not obeyed this rule, 8-bitmimesupport would have been
di?cultandbuggy.Asitwas,allIhadtodoisreadthemimestandard
(rfc1652) and add a trivial bit of header-generation logic.
Some European users bugged me into adding an option to limit
the number of messages retrieved per session (so they can control
costs from their expensive phone networks). I resisted this for a long
----------------Page (16) Break----------------
188  A FEW MORE LESSONS FROM FETCHMAIL
time, and I’m still not entirely happy about it. But if you’re writing
for the world, you have to listen to your customers – this doesn’t
change just because they’re not paying you in money.
8  A Few More Lessons From Fetchmail
Before we go back to general so=ware-engineering issues, there are
a couple more specific lessons from the fetchmail experience to pon-
der. Nontechnical readers can safely skip this section.
Therc(control)filesyntaxincludesoptional‘noise’keywordsthat
areentirelyignoredbytheparser.TheEnglish-likesyntaxtheyallow
is considerably more readable than the traditional terse keyword-
value pairs you get when you strip them all out.
These started out as a late-night experiment when I noticed how
much the rc file declarationswere beginning to resemble an impera-
tive minilanguage. (This is also why I changed the original popclient
‘server’ keyword to ‘poll’).
Itseemedtomethattryingtomakethatimperativeminilanguage
more like English might make it easier to use. Now, although I’m a
convinced partisan of the “make it a language” school of design as
exemplified by Emacs andhtmland many database engines, I am
not normally a big fan of “English-like” syntaxes.
Traditionallyprogrammershavetendedtofavorcontrolsyntaxes
that are very precise and compact and have no redundancy at all.
This is a cultural legacy from when computing resources were ex-
pensive, so parsing stages had to be as cheap and simple as possible.
English, with about 50% redundancy, looked like a very inappropri-
ate model then.
This is not my reason for normally avoiding English-like syn-
taxes; I mention it here only to demolish it. With cheap cycles and
core, terseness should not be an end in itself. Nowadays it’s more
important for a language to be convenient for humans than to be
cheap for the computer.
There remain, however, good reasons to be wary. One is the com-
plexity cost of the parsing stage – you don’t want to raise that to
the point where it’s a significant source of bugs and user confusion
in itself. Another is that trying to make a language syntax English-
like o=en demands that the “English” it speaks be bent seriously
out of shape, so much so that the superficial resemblance to natural
----------------Page (17) Break----------------
19
language is as confusing as a traditional syntax would have been.
(You see this bad e:ect in a lot of so-called “fourth generation” and
commercial database-query languages.)
The fetchmail control syntax seems to avoid these problems be-
causethelanguagedomainisextremelyrestricted.It’snowherenear
a general-purpose language; the things it says simply are not very
complicated, so there’s little potential for confusion in moving men-
tally between a tiny subset of English and the actual control lan-
guage. I think there may be a wider lesson here:
# 16When your language is nowhere near Turing-complete, syntac-
tic sugar can be your friend.
Another lesson is about security by obscurity. Some fetchmail
users asked me to change the so=ware to store passwords encrypted
in the rc file, so snoopers wouldn’t be able to casually see them.
Ididn’tdoit,becausethisdoesn’tactuallyaddprotection.Anyone
who’s acquired permissions to read your rc file will be able to run
fetchmail as you anyway – and if it’s your password they’re a=er,
they’d be able to rip the necessary decoder out of the fetchmail code
itself to get it.
All.fetchmailrcpassword encryption would have done is give
a false sense of security to people who don’t think very hard. The
general rule here is:
# 17A security system is only as secure as its secret. Beware of
pseudo-secrets.
9  Necessary Preconditions for the Bazaar Style
Early reviewers and test audiences for this paper consistently raised
questions about the preconditions for successful bazaar-style devel-
opment, including both the qualifications of the project leader and
the state of code at the time one goes public and starts to try to build
a co-developer community.
It’sfairlyclearthatonecannotcodefromthegroundupinbazaar
style[in]. One can test, debug and improve in bazaar style, but it
wouldbeveryhardtooriginateaprojectinbazaarmode.Linusdidn’t
try it. I didn’t either. Your nascent developer community needs to
have something runnable and testable to play with.
----------------Page (18) Break----------------
209  NECESSARY PRECONDITIONS FOR THE BAZAAR STYLE
When you start community-building, what you need to be able
to present is aplausible promise. Your program doesn’t have to work
particularly well. It can be crude, buggy, incomplete, and poorly
documented. What it must not fail to do is (a) run, and (b) convince
potential co-developers that it can be evolved into something really
neat in the foreseeable future.
Linux and fetchmail both went public with strong, attractive ba-
sic designs. Many people thinking about the bazaar model as I have
presented it have correctly considered this critical, then jumped
from it to the conclusion that a high degree of design intuition and
cleverness in the project leader is indispensable.
But Linus got his design from Unix. I got mine initially from the
ancestral popclient (though it would later change a great deal, much
more proportionately speaking than has Linux). So does the leader/
coordinator for a bazaar-style e:ort really have to have exceptional
design talent, or can he get by on leveraging the design talent of
others?
I think it is not critical that the coordinator be able to originate
designs of exceptional brilliance, but it is absolutely critical that the
coordinator be able torecognize good design ideas from others.
Both the Linux and fetchmail projects show evidence of this.
Linus, while not (as previously discussed) a spectacularly original
designer, has displayed a powerful knack for recognizing good de-
sign and integrating it into the Linux kernel. And I have already
described how the single most powerful design idea in fetchmail
(smtpforwarding) came from somebody else.
Early audiences of this paper complimented me by suggesting
that I am prone to undervalue design originality in bazaar projects
because I have a lot of it myself, and therefore take it for granted.
There may be some truth to this; design (as opposed to coding or
debugging) is certainly my strongest skill.
Buttheproblemwithbeingcleverandoriginalinso=waredesign
is that it gets to be a habit – you start reflexively making things
cute and complicated when you should be keeping them robust and
simple.IhavehadprojectscrashonmebecauseImadethismistake,
but I managed not to with fetchmail.
So I believe the fetchmail project succeeded partly because I re-
strained my tendency to be clever; this argues (at least) against de-
sign originality being essential for successful bazaar projects. And
consider Linux. Suppose Linus Torvalds had been trying to pull o:
----------------Page (19) Break----------------
21
fundamental innovations in operating system design during the de-
velopment; does it seem at all likely that the resulting kernel would
be as stable and successful as what we have?
A certain base level of design and coding skill is required, of
course, but I expect almost anybody seriously thinking of launching
abazaare:ortwillalreadybeabovethatminimum.Theopen-source
community’sinternalmarketinreputationexertssubtlepressureon
people not to launch development e:orts they’re not competent to
follow through on. So far this seems to have worked pretty well.
There is another kind of skill not normally associated with so=-
waredevelopmentwhichIthinkisasimportantasdesigncleverness
to bazaar projects – and it may be more important. A bazaar project
coordinator or leader must have good people and communications
skills.
This should be obvious. In order to build a development commu-
nity, you need to attract people, interest them in what you’re doing,
andkeepthemhappyabouttheamountofworkthey’redoing.Tech-
nical sizzle will go a long way towards accomplishing this, but it’s
far from the whole story. The personality you project matters, too.
It is not a coincidence that Linus is a nice guy who makes people
like him and want to help him. It’s not a coincidence that I’m an
energetic extrovert who enjoys working a crowd and has some of
the delivery and instincts of a stand-up comic. To make the bazaar
model work, it helps enormously if you have at least a little skill at
charming people.
10  The Social Context of Open-Source So=ware
It is truly written: the best hacks start out as personal solutions to
the author’s everyday problems, and spread because the problem
turns out to be typical for a large class of users. This takes us back to
the matter of rule 1, restated in a perhaps more useful way:
# 18To solve an interesting problem, start by finding a problem that
is interesting to you.
SoitwaswithCarlHarrisandtheancestralpopclient,andsowith
me and fetchmail. But this has been understood for a long time. The
interesting point, the point that the histories of Linux and fetchmail
seem to demand we focus on, is the next stage – the evolution of
----------------Page (20) Break----------------
2210  THE SOCIAL CONTEXT OF OPEN-SOURCE SOFTWARE
so=ware in the presence of a large and active community of users
and co-developers.
In “The Mythical Man-Month”, Fred Brooks observed that pro-
grammer time is not fungible; adding developers to a late so=ware
project makes it later. He argued that the complexity and commu-
nication costs of a project rise with the square of the number of
developers, while work done only rises linearly. This claim has since
become known as “Brooks’s Law” and is widely regarded as a tru-
ism. But if Brooks’s Law were the whole picture, Linux would be
impossible.
Gerald Weinberg’s classic “The Psychology Of Computer Pro-
gramming” supplied what, in hindsight, we can see as a vital correc-
tion to Brooks. In his discussion of “egoless programming”, Wein-
berg observed that in shops where developers are not territorial
about their code, and encourage other people to look for bugs and
potential improvements in it, improvement happens dramatically
faster than elsewhere.
Weinberg’schoiceofterminologyhasperhapspreventedhisanal-
ysis from gaining the acceptance it deserved – one has to smile at the
thought of describing Internet hackers as “egoless”. But I think his
argument looks more compelling today than ever.
ThehistoryofUnixshouldhavepreparedusforwhatwe’relearn-
ing from Linux (and what I’ve verified experimentally on a smaller
scale by deliberately copying Linus’s methods[egcs]). That is, that
while coding remains an essentially solitary activity, the really great
hacks come from harnessing the attention and brainpower of entire
communities.Thedeveloperwhousesonlyhisorherownbrainina
closed project is going to fall behind the developer who knows how
to create an open, evolutionary context in which feedback explor-
ing the design space, code contributions, bug-spotting, and other
improvements come back from hundreds (perhaps thousands) of
people.
But the traditional Unix world was prevented from pushing this
approach to the ultimate by several factors. One was the legal con-
traints of various licenses, trade secrets, and commercial interests.
Another(inhindsight)wasthattheInternetwasn’tyetgoodenough.
Before cheap Internet, there were some geographically compact
communities where the culture encouraged Weinberg’s “egoless”
programming, and a developer could easily attract a lot of skilled
kibitzers and co-developers. Bell Labs, themit aiLab,ucBerkeley –
----------------Page (21) Break----------------
23
these became the home of innovations that are legendary and still
potent.
Linux was the first project to make a conscious and successful
e:ort to use the entire world as its talent pool. I don’t think it’s a
coincidence that the gestation period of Linux coincided with the
birth of the World Wide Web, and that Linux le=its infancy during
the same period in 1993–1994 that saw the takeo:of theispindus-
try and the explosion of mainstream interest in the Internet. Linus
was the first person who learned how to play by the new rules that
pervasive Internet access made possible.
While cheap Internet was a necessary condition for the Linux
model to evolve, I think it was not by itself a su?cient condition.
Another vital factor was the development of a leadership style and
set of cooperative customs that could allow developers to attract co-
developers and get maximum leverage out of the medium.
But what is this leadership style and what are these customs?
They cannot be based on power relationships – and even if they
could be, leadership by coercion would not produce the results we
see.Weinbergquotestheautobiographyofthe19th-centuryRussian
anarchist Pyotr Alexeyvich Kropotkin’sMemoirs of a Revolutionistto
good e:ect on this subject:
Having been brought up in a serf-owner’s family, I en-
tered active life, like all young men of my time, with a
great deal of confidence in the necessity of commanding,
ordering, scolding, punishing and the like. But when, at
an early stage, I had to manage serious enterprises and to
deal with [free] men, and when each mistake would lead
at once to heavy consequences, I began to appreciate the
di:erence between acting on the principle of command
and discipline and acting on the principle of common un-
derstanding.Theformerworksadmirablyinamilitarypa-
rade, but it is worth nothing where real life is concerned,
andtheaimcanbeachievedonlythroughtheseveree:ort
of many converging wills.
The “severe e:ort of many converging wills” is precisely what
a project like Linux requires – and the “principle of command” is
e:ectively impossible to apply among volunteers in the anarchist’s
paradise we call the Internet. To operate and compete e:ectively,
----------------Page (22) Break----------------
2410  THE SOCIAL CONTEXT OF OPEN-SOURCE SOFTWARE
hackers who want to lead collaborative projects have to learn how
to recruit and energize e:ective communities of interest in the
mode vaguely suggested by Kropotkin’s “principle of understand-
ing”. They must learn to use Linus’s Law.[sp]
Earlier I referred to the “Delphi e:ect” as a possible explana-
tion for Linus’s Law. But more powerful analogies to adaptive sys-
tems in biology and economics also irresistably suggest themselves.
The Linux world behaves in many respects like a free market or an
ecology, a collection of selfish agents attempting to maximize utility
which in the process produces a self-correcting spontaneous order
more elaborate and e?cient than any amount of central planning
could have achieved. Here, then, is the place to seek the “principle
of understanding”.
The “utility function” Linux hackers are maximizing is not classi-
callyeconomic,butistheintangibleoftheirownegosatisfactionand
reputation among other hackers. (One may call their motivation “al-
truistic”, but this ignores the fact that altruism is itself a form of ego
satisfaction for the altruist). Voluntary cultures that work this way
are not actually uncommon; one other in which I have long partic-
ipated is science fiction fandom, which unlike hackerdom has long
explicitlyrecognized“egoboo”(ego-boosting,ortheenhancementof
one’s reputation among other fans) as the basic drive behind volun-
teer activity.
Linus, by successfully positioning himself as the gatekeeper of
a project in which the development is mostly done by others, and
nurturing interest in the project until it became self-sustaining, has
shown an acute grasp of Kropotkin’s “principle of shared under-
standing”. This quasi-economic view of the Linux world enables us
to see how that understanding is applied.
We may view Linus’s method as a way to create an e?cient mar-
ket in “egoboo” – to connect the selfishness of individual hackers
as firmly as possible to di?cult ends that can only be achieved by
sustained cooperation. With the fetchmail project I have shown (al-
beit on a smaller scale) that his methods can be duplicated with
good results. Perhaps I have even done it a bit more consciously and
systematically than he.
Many people (especially those who politically distrust free mar-
kets)wouldexpectacultureofself-directedegoiststobefragmented,
territorial, wasteful, secretive, and hostile. But this expectation is
clearly falsified by (to give just one example) the stunning variety,
----------------Page (23) Break----------------
25
quality and depth of Linux documentation. It is a hallowed given
that programmers hate documenting; how is it, then, that Linux
hackersgeneratesomuchofit?EvidentlyLinux’sfreemarketinego-
boo works better to produce virtuous, other-directed behavior than
the massively-funded documentation shops of commercial so=ware
producers.
Both the fetchmail and Linux kernel projects show that by prop-
erly rewarding the egos of many other hackers, a strong developer/
coordinator can use the Internet to capture the benefits of having
lots of co-developers without having a project collapse into a chaotic
mess. So to Brooks’s Law I counter-propose the following:
# 19Provided the development coordinator has a medium at least as
good as the Internet, and knows how to lead without coercion, many
heads are inevitably better than one.
I think the future of open-source so=ware will increasingly be-
long to people who know how to play Linus’s game, people who
leave behindthe cathedralandembracethe bazaar.This isnot to say
that individual vision and brilliance will no longer matter; rather,
I think that the cutting edge of open-source so=ware will belong
to people who start from individual vision and brilliance, then am-
plifyitthroughthee:ectiveconstructionofvoluntarycommunities
of interest.
Perhaps this is not only the future ofopen-sourceso=ware. No
closed-source developer can match the pool of talent the Linux com-
munity can bring to bear on a problem. Very few could a:ord even
to hire the more than two hundred (1999: six hundred, 2000: eight
hundred) people who have contributed to fetchmail!
Perhaps in the end the open-source culture will triumph not be-
cause cooperation is morally right or so=ware“hoarding” is morally
wrong (assuming you believe the latter, which neither Linus nor
I do), but simply because the closed-source world cannot win an
evolutionary arms race with open-source communities that can put
orders of magnitude more skilled time into a problem.
11  On Management and the Maginot Line
The original “Cathedral and Bazaar” paper of 1997 ended with the
vision above – that of happy networked hordes of programmer/
----------------Page (24) Break----------------
2611  ON MANAGEMENT AND THE MAGINOT LINE
anarchists outcompeting and overwhelming the hierarchical world
of conventional closed so=ware.
A good many skeptics weren’t convinced, however; and the ques-
tions they raise deserve a fair engagement. Most of the objections
to the bazaar argument come down to the claim that its proponents
have underestimated the productivity- multiplying e:ect of conven-
tional management.
Traditionally-minded so=ware-development managers o=en ob-
ject that the casualness with which project groups form and change
and dissolve in the open- source world negates a significant part
of the apparent advantage of numbers that the open-source commu-
nityhasoveranysingleclosed-sourcedeveloper.Theywouldobserve
that in so=ware development it is really sustained e:ort over time
and the degree to which customers can expect continuing invest-
ment in the product that matters, not just how many people have
thrown a bone in the pot and le=it to simmer.
There is something to this argument, to be sure; in fact, I have
developed the idea that expected future service value is the key to
the economics of so=ware production inThe Magic Cauldron.
But this argument also has a major hidden problem; its implicit
assumption that open-source development cannot deliver such sus-
tainede:ort.Infact,therehavebeenopen-sourceprojectsthatmain-
tained a coherent direction and an e:ective maintainer community
over quite long periods of time without the kinds of incentive struc-
tures or institutional controls that conventional management finds
essential. The development of thegnuEmacs editor is an extreme
and instructive example; it has absorbed the e:orts of hundreds of
contributors over fi=een years into a unified architectural vision,
despite high turnover and the fact that only one person (its author)
has been continuously active during all that time. No closed-source
editor has ever matched this longevity record.
This suggests a reason for questioning the advantages of conven-
tionally-managed so=ware development that is independent of the
rest of the arguments over cathedral vs. bazaar mode. If it’s possible
forgnuEmacstoexpressaconsistentarchitecturalvisionoverfi=een
years,orforanoperatingsystemlikeLinuxtodothesameovereight
years of rapidly changing hardware and platform technology; and
if (as is indeed the case) there have been many well- architected
open-source projects of more than five years duration – then we are
----------------Page (25) Break----------------
27
entitled to wonder what, if anything, the tremendous overhead of
conventionally- managed development is actually buying us.
Whatever it is certainly doesn’t include reliable execution by
deadline, or on budget, or to all features of the specification; it’s
a rare ‘managed’ project that meetseven one of these goals, letalone
all three. It also does not appear to be ability to adapt to changes in
technologyandeconomiccontextduringtheprojectlifetime,either;
the open-source community has proven far more e:ective on that
score(asonecanreadilyverify,forexample,bycomparingthethirty-
year history of the Internet with the short half-lives of proprietary
networking technologies – or the cost of the 16-bit to 32-bit transi-
tion in Microso=Windows with the nearly e:ortless up-migration
of Linux during the same period, not only along the Intel line of
development but to more than a dozen other hardware platforms
including the 64-bit Alpha as well).
One thing many people think the traditional mode buys you is
somebody to hold legally liable and potentially recover compensa-
tion from if the project goes wrong. But this is an illusion; most so=-
warelicensesarewrittentodisclaimevenwarrantyofmerchantabil-
ity, let alone performance – and cases of successful recovery for
so=ware nonperformance are vanishingly rare. Even if they were
common, feeling comforted by having somebody to sue would be
missing the point. You didn’t want to be in a lawsuit; you wanted
working so=ware.
So what is all that management overhead buying?
Inordertounderstandthat,weneedtounderstandwhatso=ware
developmentmanagersbelievetheydo.AwomanIknowwhoseems
tobeverygoodatthisjobsaysso=wareprojectmanagementhasfive
functions:
1. Todefine goalsand keep everybody pointed in the same direc-
tion.
2. Tomonitorand make sure crucial details don’t get skipped.
3. Tomotivatepeople to do boring but necessary drudgework.
4. Toorganizethe deployment of people for best productivity.
5. Tomarshal resourcesneeded to sustain the project.
----------------Page (26) Break----------------
2811  ON MANAGEMENT AND THE MAGINOT LINE
Apparently worthy goals, all of these; but under the open-source
model, and in its surrounding social context, they can begin to seem
strangely irrelevant. We’ll take them in reverse order.
My friend reports that a lot ofresource marshallingis basically
defensive;onceyouhaveyourpeopleandmachinesando?cespace,
you have to defend them from peer managers competing for the
same resources, and higher-ups trying to allocate the most e?cient
use of a limited pool.
But open-source developers are volunteers, self-selected for both
interest and ability to contribute to the projects they work on (and
this remains generally true even when they are being paid a salary
tohackopensource.)Thevolunteerethostendstotakecareofthe‘at-
tack’ side of resource-marshalling automatically; people bring their
own resources to the table. And there is little or no need for a man-
ager to ‘play defense’ in the conventional sense.
Anyway, in a world of cheappcs and fast Internet links, we find
pretty consistently that the only really limiting resource is skilled at-
tention. Open- source projects, when they founder, essentially never
do so for want of machines or links or o?ce space; they die only
when the developers themselves lose interest.
That being the case, it’s doubly important that open-source hack-
ersorganize themselvesfor maximum productivity by self-selection –
and the social milieu selects ruthlessly for competence. My friend,
familiar with both the open-source world and large closed projects,
believes that open source has been successful partly because its cul-
ture only accepts the most talented 5% or so of the programming
population.Shespendsmostofhertimeorganizingthedeployment
of the other 95%, and has thus observed first-hand the well-known
varianceofafactorofonehundredinproductivitybetweenthemost
able programmers and the merely competent.
The size of that variance has always raised an awkward question:
would individual projects, and the field as a whole, be better o:
without more than 50% of the least able in it? Thoughtful managers
have understood for a long time that if conventional so=ware man-
agement’s only function were to convert the least able from a net
loss to a marginal win, the game might not be worth the candle.
The success of the open-source community sharpens this ques-
tionconsiderably,byprovidinghardevidencethatitiso=encheaper
and more e:ective to recruit self-selected volunteers from the Inter-
----------------Page (27) Break----------------
29
net than it is to manage buildings full of people who would rather
be doing something else.
Which brings us neatly to the question ofmotivation. An equiva-
lentando=en-heardwaytostatemyfriend’spointisthattraditional
development management is a necessary compensation for poorly
motivated programmers who would not otherwise turn out good
work.
This answer usually travels with a claim that the open-source
community can only be relied on to do work that is ‘sexy’ or techni-
cally sweet; anything else will be le=undone (or done only poorly)
unlessit’schurnedoutbymoney-motivatedcubiclepeonswithman-
agers cracking whips over them. I address the psychological and so-
cial reasons for being skeptical of this claim in “Homesteading the
Noosphere”. For present purposes, however, I think it’s more inter-
esting to point out the implications of accepting it as true.
If the conventional, closed-source, heavily-managed style of so=-
ware development is really defended only by a sort of Maginot line
of problems conducive to boredom, then it’s going to remain viable
in each individual application area for only so long as nobody finds
those problems really interesting and nobody else finds any way
to route around them. Because the moment there is open-source
competition for a ‘boring’ piece of so=ware, customers are going to
know that it was finally tackled by someone who chose that problem
to solve because of a fascination with the problem itself – which, in
so=ware as in other kinds of creative work, is a far more e:ective
motivator than money alone.
Having a conventional management structure solely in order to
motivate, then, is probably good tactics but bad strategy; a short-
term win, but in the longer term a surer loss.
So far, conventional development management looks like a bad
bet now against open source on two points (resource marshalling,
organization), and like it’s living on borrowed time with respect to
a third (motivation). And the poor beleaguered conventional man-
ager is not going to get any succour from themonitoringissue; the
strongest argument the open-source community has is that decen-
tralized peer review trumps all the conventional methods for trying
to ensure that details don’t get slipped.
Can we savedefining goalsas a justification for the overhead of
conventional so=ware project management? Perhaps; but to do so,
we’ll need good reason to believe that management committees and
----------------Page (28) Break----------------
3011  ON MANAGEMENT AND THE MAGINOT LINE
corporate roadmaps are more successful at defining worthy and
widely-shared goals than the project leaders and tribal elders who
fill the analogous role in the open-source world.
That is on the face of it a pretty hard case to make. And it’s not so
muchtheopen-sourcesideofthebalance(thelongevityofEmacs,or
Linus Torvalds’s ability to mobilize hordes of developers with talk
of “world domination”) that makes it tough. Rather, it’s the demon-
stratedawfulnessofconventionalmechanismsfordefiningthegoals
of so=ware projects.
One of the best-known folk theorems of so=ware engineering is
that 60% to 75% of conventional so=ware projects either are never
completed or are rejected by their intended users. If that range is
anywhereneartrue(andI’venevermetamanagerofanyexperience
whodisputesit)thenmoreprojectsthannotarebeingaimedatgoals
that are either (a) not realistically attainable, or (b) just plain wrong.
This, more than any other problem, is the reason that in today’s
so=ware engineering world the very phrase “management commit-
tee”islikelytosendchillsdownthehearer’sspine–even(orperhaps
especially) if the hearer is a manager. The days when only program-
mersgripedaboutthispatternarelongpast;‘Dilbert’cartoonshang
overexecutives’desks now.
Our reply, then, to the traditional so=ware development man-
ager, is simple – if the open-source community has really underes-
timated the value of conventional management,why do so many of
you display contempt for your own process?
Onceagaintheexistenceoftheopen-sourcecommunitysharpens
this question considerably – because we havefundoing what we do.
Our creative play has been racking up technical, market-share, and
mind-share successes at an astounding rate. We’re proving not only
that we can do better so=ware, but thatjoy is an asset.
Two and a half years a=er the first version of this essay, the most
radical thought I can o:er to close with is no longer a vision of an
open-source- dominated so=ware world; that, a=er all, looks plausi-
ble to a lot of sober people in suits these days.
Rather, I want to suggest what may be a wider lesson about so=-
ware, (and probably about every kind of creative or professional
work). Human beings generally take pleasure in a task when it falls
inasortofoptimal-challengezone;notsoeasyastobeboring,nottoo
hard to achieve. A happy programmer is one who is neither under-
----------------Page (29) Break----------------
31
utilized nor weighed down with ill-formulated goals and stressful
process friction.Enjoyment predicts e?ciency.
Relating to your own work process with fear and loathing (even
in the displaced, ironic way suggested by hanging up Dilbert car-
toons) should therefore be regarded in itself as a sign that the pro-
cess has failed. Joy, humor, and playfulness are indeed assets; it was
not mainly for the alliteration that I wrote of “happy hordes” above,
and it is no mere joke that the Linux mascot is a cuddly, neotenous
penguin.
Itmaywellturnoutthatoneofthemostimportante:ectsofopen
source’ssuccesswillbetoteachusthatplayisthemosteconomically
e?cient mode of creative work.
12  Acknowledgements
This paper was improved by conversations with a large number of
people who helped debug it. Particular thanks to Je:Dutky<dutky@
wam.umd.edu>,whosuggestedthe“debuggingisparallelizable”for-
mulation,andhelpeddeveloptheanalysisthatproceedsfromit.Also
to Nancy Lebovitz<nancyl@universe.digex.net>for her suggestion
thatIemulateWeinbergbyquotingKropotkin.Perceptivecriticisms
also came from Joan Eslinger<wombat@kilimanjaro.engr.sgi.com>
and Marty Franz<marty@net-link.net>of the General Technics list.
Glen Vandenburg<glv@vanderburg.org>pointeed out the impor-
tance of self-selection in contributor populations and suggested the
fruitful idea that much development rectifies ‘bugs of omission’;
Daniel Upper<upper@peak.org>suggested the natural analogies for
this. I’m grateful to the members ofplug, the Philadelphia Linux
User’s group, for providing the first test audience for the first pub-
lic version of this paper. Paula Matuszek<matusp00@mh.us.sbphrd
.com>enlightened me about the practice of so=ware management.
Phil Hudson<phil.hudson@iname.com>reminded me that the so-
cial organization of the hacker culture mirrors the organization of
itsso=ware,andvice-versa.Finally,LinusTorvalds’scommentswere
helpful and his early endorsement very encouraging.
----------------Page (30) Break----------------
3213  FOR FURTHER READING
13  For Further Reading
I quoted several bits from Frederick P. Brooks’s classicThe Mythical
Man-Monthbecause, in many respects, his insights have yet to be
improvedupon.Iheartilyrecommendthe25thAnniversaryedition
from Addison-Wesley (isbn0-201-83595-9), which adds his 1986“No
Silver Bullet”paper.
The new edition is wrapped up by an invaluable 20-years-later
retrospective in which Brooks forthrightly admits to the few judge-
mentsintheoriginaltextwhichhavenotstoodthetestoftime.Ifirst
read the retrospective a=er the first public version of this paper was
substantially complete, and was surprised to discover that Brooks
attributes bazaar-like practices to Microso=! (In fact, however, this
attribution turned out to be mistaken. In 1998 we learned from the
Halloween Documentsthat Microso=’s internal developer commu-
nity is heavily balkanized, with the kind of general source access
needed to support a bazaar not even truly possible.)
Gerald M. Weinberg’sThe Psychology Of Computer Programming
(New York, Van Nostrand Reinhold 1971) introduced the rather un-
fortunately-labeledconceptof“egolessprogramming”.Whilehewas
nowhere near the first person to realize the futility of the “principle
of command”, he was probably the first to recognize and argue the
point in particular connection with so=ware development.
Richard P. Gabriel, contemplating the Unix culture of the pre-
Linux era, reluctantly argued for the superiority of a primitive ba-
zaar-like model in his 1989 paperLisp: Good News, Bad News, and
How To Win Big. Though dated in some respects, this essay is still
rightly celebrated among Lisp fans (including me). A correspondent
remindedmethatthesectiontitled“WorseIsBetter”readsalmostas
an anticipation of Linux. The paper is accessible on the World Wide
Web athttp://www.naggum.no/worse-is-better.html.
De Marco and Lister’sPeopleware: Productive Projects and Teams
(New York; Dorset House, 1987;isbn0-932633-05-6) is an underap-
preciated gem which I was delighted to see Fred Brooks cite in his
retrospective. While little of what the authors have to say is directly
applicable to the Linux or open-source communities, the authors’
insight into the conditions necessary for creative work is acute and
worthwhile for anyone attempting to import some of the bazaar
model’s virtues into a commercial context.
----------------Page (31) Break----------------
33
Finally, I must admit that I very nearly called this paper “The
Cathedral and the Agora”, the latter term being the Greek for an
open market or public meeting place. The seminal “agoric systems”
papers by Mark Miller and Eric Drexler, by describing the emer-
gent properties of market-like computational ecologies, helped pre-
pare me to think clearly about analogous phenomena in the open-
source culture when Linux rubbed my nose in them five years later.
These papers are available on the Web athttp://www.agorics.com/
agorpapers.html.
14  Epilog: Netscape Embraces the Bazaar
It’s a strange feeling to realize you’re helping make history....
OnJanuary221998,approximatelysevenmonthsa=erIfirstpub-
lished “The Cathedral and the Bazaar”, Netscape Communications,
Inc. announced plans togive away the source for Netscape Commu-
nicator. I had had no clue this was going to happen before the day of
the announcement.
Eric Hahn, Executive Vice President and Chief Technology Of-
ficer at Netscape, emailed me shortly a=erwards as follows: “On
behalf of everyone at Netscape, I want to thank you for helping us
get to this point in the first place. Your thinking and writings were
fundamental inspirations to our decision.”
The following week I flew out to Silicon Valley at Netscape’s invi-
tation for a day-long strategy conference (on Feb 4 1998) with some
of their top executives and technical people. We designed Netscape’s
source-release strategy and license together.
A few days later I wrote the following:
Netscape is about to provide us with a large-scale, real-
world test of the bazaar model in the commercial world.
The open-source culture now faces a danger; if Netscape’s
execution doesn’t work, the open-source concept may be
so discredited that the commercial world won’t touch it
again for another decade.
On the other hand, this is also a spectacular opportu-
nity. Initial reaction to the move on Wall Street and else-
where has been cautiously positive. We’re being given a
chance to prove ourselves, too. If Netscape regains sub-
----------------Page (32) Break----------------
3414  EPILOG: NETSCAPE EMBRACES THE BAZAAR
stantial market share through this move, it just may set
o:a long-overdue revolution in the so=ware industry.
Thenextyearshouldbeaveryinstructiveandinterest-
ing time.
And indeed it was. As I write in mid-1999, the development of
what was later named ‘Mozilla’ has been only a qualified success.
It achieved Netscape’s original goal, which was to deny Microso=
a monopoly lock on the browser market. It has also achieved some
dramaticsuccesses(notablythereleaseofthenext-generationGecko
rendering engine).
However, it has not yet garnered the massive development ef-
fort from outside Netscape that the Mozilla founders had originally
hoped for. The problem here seems to be that for a long time the
Mozilla distribution actually broke one of the basic rules of the
bazaar model; they didn’t ship something potential contributors
could easily run and see working. (Until more than a year a=er re-
lease, building Mozilla from source required a license for the propri-
etary Motif library.)
Most negatively (from the point of view of the outside world) the
Mozillagrouphasyettoshipaproduction-qualitybrowser–andone
of the project’s principals caused a bit of a sensation by resigning,
complainingofpoormanagementandmissedopportunities.“Open
source,” he correctly observed, “is not magic pixie dust.”
And indeed it is not. The long-term prognosis for Mozilla looks
dramatically better now (in August 2000) than it did at the time
of Jamie Zawinski’s resignation letter – but he was right to point
out that going open will not necessarily save an existing project that
su:ersfromill-definedgoalsorspaghetticodeoranyoftheso=ware
engineering’s other chronic ills. Mozilla has managed to provide an
example simultaneously of how open source can succeed and how it
could fail.
In the mean time, however, the open-source idea has scored suc-
cessesandfoundbackerselsewhere.1998andlate1999sawatremen-
dous explosion of interest in the open-source development model,
a trend both driven by and driving the continuing success of the
Linux operating system. The trend Mozilla touched o:is continuing
at an accelerating rate.
----------------Page (33) Break----------------
35
15  Endnotes
[jb]InPrograming Pearls, the noted computer-science aphorist
Jon Bentley comments on Brooks’s observation with “If you plan to
throw one away, you will throw away two.”. He is almost certainly
right. The point of Brooks’s observation, and Bentley’s, isn’t merely
thatyoushouldexpectfirstattempttobewrong,it’sthatstartingover
with the right idea is usually more e:ective than trying to salvage a
mess.
[qr]Examples of successful open-source, bazaar development
predating the Internet explosion and unrelated to the Unix and In-
ternet traditions have existed. The development of theinfo-Zipcom-
pression utility during 1990–1992, primarily fordosmachines, was
one such. Another was therbbsbulletin board system (again for
dos), which began in 1983 and developed a su?ciently strong com-
munity that there have been fairly regular releases up to the present
(mid-1999) despite the huge technical advantages of Internet mail
and file-sharing over localbbss. While the info-Zip community re-
lied to some extent on Internet mail, therbbsdeveloper culture was
actually able to base a substantial on-line community onrbbsthat
was completely independent of thetcp/ipinfrastructure.
[jh]John Hasler has suggested an interesting explanation for the
fact that duplication of e:ort doesn’t seem to be a net drag on open-
source development. He proposes what I’ll dub “Hasler’s Law”: the
costsofduplicatedworktendtoscalesub-qadraticallywithteamsize
– that is, more slowly than the planning and management overhead
that would be needed to eliminate them.
ThisclaimactuallydoesnotcontradictBrooks’sLaw.Itmaybethe
case that total complexity overhead and vulnerability to bugs scales
with the square of team size, but that the costs fromduplicatedwork
are nevertheless a special case that scales more slowly. It’s not hard
to develop plausible reasons for this, starting with the undoubted
factthatitismucheasiertoagreeonfunctionalboundariesbetween
di:erentdevelopers’codethatwillpreventduplicationofe:ortthan
it is to prevent the kinds of unplanned bad interactions across the
whole system that underly most bugs.
The combination of Linus’s Law and Hasler’s Law suggests that
there are actually three critical size regimes in so=ware projects. On
small projects (I would say one to at most three developers) no man-
agement structure more elaborate than picking a lead programmer
----------------Page (34) Break----------------
3615  ENDNOTES
isneeded.Andthereissomeintermediaterangeabovethatinwhich
the cost of traditional management is relatively low, so its benefits
fromavoidingduplicationofe:ort,bug-tracking,andpushingtosee
that details are not overlooked actually net out positive.
Abovethat,however,thecombinationofLinus’sLawandHasler’s
Law suggests there is a large-project range in which the costs and
problems of traditional management rise much faster than the ex-
pected cost from duplication of e:ort. Not the least of these costs
is a structural inability to harness the many-eyeballs e:ect, which
(as we’ve seen) seems to do a much better job than traditional man-
agement at making sure bugs and details are not overlooked. Thus,
in the large-project case, the combination of these laws e:ectively
drives the net payo:of traditional management to zero.
[hbs]The split between Linux’s experimental and stable versions
has another function related to, but distinct from, hedging risk. The
split attacks another problem: the deadliness of deadlines. When
programmers are held both to an immutable feature list and a fixed
drop-dead date, quality goes out the window and there is likely a
colossal mess in the making. I am indebted to Marco Iansiti and
Alan MacCormack of the Harvard Business School for pointing me
at evidence that relaxing either one of these constraints can make
scheduling workable.
One way to do this is to fix the deadline but leave the feature list
flexible, allowing features to drop o:if not completed by deadline.
This is essentially the strategy of the “stable” kernel branch; Alan
Cox (the stable-kernel maintainer) puts out releases at fairly regular
intervals, but makes no guarantees about when particular bugs will
be fixed or features back-ported from the experimental branch.
The other way to do this is to set a desired feature list and deliver
only when it is done. This is essentially the strategy of the “experi-
mental” kernel branch. De Marco and Lister cited research showing
that this scheduling policy (“wake me up when it’s done”) produces
not only the highest quality but, on average, shorter delivery times
than either “realistic” or “aggressive” scheduling.
I have come to suspect (as of early 2000) that in earlier versions
of this paper I severely underestimated the importance of the “wake
meupwhenit’sdone”anti-dealinepolicytotheopen-sourcecommu-
nity’s productivity and quality. General experience with the rushed
gnome1.0 in 1999 suggests that pressure for a premature release
----------------Page (35) Break----------------
37
can neutralize many of the quality benefits open source normally
confers.
It may well turn out to be that the process transparency of open
sourceisoneofthreecoequaldriversofitsquality,alongwith“wake
me up when it’s done” scheduling and developer self-selection.
[in]An issue related to whether one can start projects from zero
in the bazaar style is whether the bazaar style is capable of support-
ing truly innovative work. Some claim that, lacking strong leader-
ship, the bazaar can only handle the cloning and improvement of
ideas already present at the engineering state of the art, but is un-
able to push the state of the art. This argument was perhaps most
infamously made by theHalloween Documents, two embarrassing
internal Microso=memoranda written about the open-source phe-
nomenon.TheauthorscomparedLinux’sdevelopmentofaUnix-like
operating system to “chasing taillights”, and opined “(once a project
has achieved “parity” with the state-of-the-art), the level of manage-
ment necessary to push towards new frontiers becomes massive.”
There are serious errors of fact implied in this argument. One
is exposed when the Halloween authors themseselves later observe
that “o=en [...] new research ideas are first implemented and avail-
able on Linux before they are available/incorporated into other plat-
forms.”
If we read “open source” for “Linux”, we see that this is far from
a new phenomenon. Historically, the open-source community did
not invent Emacs or the World Wide Web or the Internet itself by
chasing taillights or being massively managed – and in the present,
thereissomuchinnovativeworkgoingoninopensourcethatoneis
spoiledforchoice.Thegnomeproject(topickoneofmany)ispushing
the state of the art inguis and object technology hard enough to
have attracted considerable notice in the computer trade press well
outside the Linux community. Other examples are legion, as a visit
toFreshmeaton any given day will quickly prove.
Butthereisamorefundamentalerrorintheimplicitassumption
that thecathedral model(or the bazaar model, or any other kind
of management structure) can somehow make innovation happen
reliably. This is nonsense. Gangs don’t have breakthrough insights –
even volunteer groups of bazaar anarchists are usually incapable of
genuine originality, let alone corporate committees of people with a
survivalstakeinsomestatusquoante.Insightcomesfromindividuals.
The most their surrounding social machinery can ever hope to do
----------------Page (36) Break----------------
3815  ENDNOTES
is to beresponsiveto breakthrough insights – to nourish and reward
and rigorously test them instead of squashing them.
Some will characterize this as a romantic view, a reversion to
outmoded lone-inventor stereotypes. Not so; I am not asserting that
groups are incapable ofdevelopingbreakthrough insights once they
have been hatched; indeed, we learn from the peer-review process
that such development groups are essential to producing a high-
quality result. Rather I am pointing out that every such group de-
velopment starts from – is necessarily sparked by – one good idea
in one person’s head. Cathedrals and bazaars and other social struc-
tures can catch that lightning and refine it, but they cannot make it
on demand.
Therefore the root problem of innovation (in so=ware, or any-
where else) is indeed how not to squash it – but, even more funda-
mentally, it ishow to grow lots of people who can have insights in the
first place.
To suppose that cathedral-style development could manage this
trick but the low entry barriers and process fluidity of the bazaar
cannot would be absurd. If what it takes is one person with one good
idea, then a social milieu in which one person can rapidly attractthe
cooperation of hundreds or thousands of others with that good idea
is going inevitably to out-innovate any in which the person has to
do a political sales job to a hierarchy before he can work on his idea
without risk of getting fired.
And, indeed, if we look at the history of so=ware innovation by
organizations using the cathedral model, we quickly find it is rather
rare. Large corporations rely on university research for new ideas
(thus the Halloween Documents authors’ unease about Linux’s fa-
cility at coopting that research more rapidly). Or they buy out small
companies built around some innovator’s brain. In neither case is
the innovation native to the cathedral culture; indeed, many in-
novations so imported end up being quietly su:ocated under the
"massive level of management" the Halloween Documents’ authors
so extol.
That, however, is a negative point. The reader would be better
served by a positive one. I suggest, as an experiment, the following:
– Pick a criterion for originality that you believe you can apply
consistently.Ifyourdefinitionis“IknowitwhenIseeit”,that’s
not a problem for purposes of this test.
----------------Page (37) Break----------------
39
– Pickanyclosed-sourceoperatingsystemcompetingwithLinux,
and a best source for accounts of current development work on
it.
– Watch that source and Freshmeat for one month. Every day,
count the number of release announcements on Freshmeat
that you consider ‘original’ work. Apply the same definition of
‘original’ to announcements for that otherosand count them.
– Thirty days later, total up both figures.
The day I wrote this, Freshmeat carried twenty-two release an-
nouncements, of which three appear they might push state of the
art in some respect, This was a slow day for Freshmeat, but I will be
astonished if any reader reports as many as three likely innovations
a monthin any closed-source channel.
[egcs]Wehowhavehistoryonaprojectthat,inseveralways,may
provide a more indicative test of the bazaar premise than fetchmail;
egcs, the ExperimentalgnuCompiler System.
This projectwasannounced in mid-August of 1997 as a conscious
attempt to apply the ideas in the early public versions of “The Cathe-
dralandtheBazaar”.Theprojectfounders feltthatthedevelopment
ofgcc, the Gnu C Compiler, had been stagnating. For about twenty
months a=erwards,gccandegcscontinued as parallel products –
both drawing from the same Internet developer population, both
starting from the samegccsource base, both using pretty much the
same Unix toolsets and development environment. The projects dif-
fered only in thategcsconsciously tried to apply the bazaar tactics I
have previously described, whilegccretained a more cathedral-like
organization with a closed developer group and infrequentreleases.
This was about as close to a controlled experiment as one could
ask for, and the results were dramatic. Within months, theegcs
versions had pulled substantially ahead in features; better optimiza-
tion, better support forfortranand C++. Many people found the
egcsdevelopment snapshots to be more reliable than the most re-
cent stable version ofgcc, and major Linux distributions began to
switch toegcs.
In April of 1999, the Free So=ware Foundation (the o?cial spon-
sors ofgcc) dissolved the originalgccdevelopment group and o?-
cially handed control of the project to the theegcssteering team.
----------------Page (38) Break----------------
4015  ENDNOTES
[sp]Of course, Kropotkin’s critique and Linus’s Law raise some
wider issues about the cybernetics of social organizations. Another
folk theorem of so=ware engineering suggests one of them; Con-
way’s Law – commonly stated as “If you have four groups working
on a compiler, you’ll get a 4-pass compiler”. The original statement
was more general: “Organizations which design systems are con-
strained to produce designs which are copies of the communication
structures of these organizations.” We might put it more succinctly
as “The means determine the ends”,or even “Processbecomes prod-
uct”.
It is accordingly worth noting that in the open-source commu-
nity organizational form and function match on many levels. The
network is everything and everywhere: not just the Internet, but
the people doing the work form a distributed, loosely coupled, peer-
to-peer network which provides multiple redundancy and degrades
verygracefully.Inbothnetworks,eachnodeisimportantonlytothe
extent that other nodes want to cooperate with it.
The peer-to-peer part is essential to the community’s astonishing
productivity. The point Kropotkin was trying to make about power
relationships is developed further by the ‘snafuPrinciple’: “True
communication is possible only between equals, because inferiors
are more consistently rewarded for telling their superiors pleasant
lies than for telling the truth.” Creative teamwork utterly depends
on true communication and is thus very seriously hindered by the
presence of power relationships. The open-source community, ef-
fectively free of such power relationships, is teaching us by contrast
howdreadfullymuchtheycostinbugs,inloweredproductivity,and
in lost opportunities.
Further, thesnafuprinciple predicts in authoritarian organiza-
tions a progressive disconnect between decision-makers and reality,
as more and more of the input to those who decide tends to become
pleasant lies. The way this plays out in conventional so=ware devel-
opment is easy to see; there are strong incentives for the inferiors to
hide, ignore, and minimize problems. When this process becomes
product, so=ware is a disaster.
(c)http://www.tuxedo.org/~esr/writings/cathedral-bazaar/
Set in 11pturwAntiqua type by TEX.
August 22, 2001
----------------Page (39) Break----------------
